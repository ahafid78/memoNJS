old_app :
////////////////////////////////////////
const express = require("express");
const morgan = require("morgan");
const favicon = require("serve-favicon");
const bodyParser = require("body-parser");
//1- conn BDD
const { Sequelize, DataTypes } = require("sequelize");
let pokemons = require("./src/db/mock-pokemon");
//2- sync avec BDD
let PokemonModel = require("./src/models/pokemon");
const { success, getUniqueId } = require("./helper.js");
const app = express();
const port = 3000;
//1- conn BDD
const sequelize = new Sequelize("pokedex", "root", "", {
  host: "localhost",
  dialect: "mariadb",
  dialectOptions: {
    timezone: "Etc/GMT+1",
  },
  logging: false,
});

sequelize
  .authenticate()
  .then((_) =>
    console.log(" La connexion à la base de donnée a bien été établie")
  )
  .catch((error) =>
    console.error(`Impossible de se connecter à la base de données ${error}`)
  );

//2- sync BDD
const Pokemon = PokemonModel(sequelize, DataTypes);
sequelize.sync({ force: true }).then((_) => {
  console.log("La base de donnée Pokedex a bien été synchronisé");

  pokemons.map((pokemon) => {
    Pokemon.create({
      name: pokemon.name,
      hp: pokemon.hp,
      cp: pokemon.cp,
      picture: pokemon.picture,
      types: pokemon.types.join(),
    }).then((bulbizzare) => console.log(bulbizzare.toJSON()));
  });
});

// Pour l'utilisation apres l'installation des middlewares (avec la commande : npm install nom-middleware --save-dev) et importation avec (const nom-middleware = require('nom-depende-middleware'))
app
  .use(favicon(__dirname + "/favicon.ico"))
  .use(morgan("dev"))
  .use(bodyParser.json());

// middleware loger local
// app.use((req, res, next) => {
//   console.log(`URL : ${req.url}`);
//   next();
// });

// app.use(morgan("dev"));

app.get("/", (req, res) => res.send("Hello, Express"));

// app.get("/api/test/:id/:name", (req, res) => {
//   const id = req.params.id;
//   const name = req.params.name;
//   res.send(
//     `Vous avez demandé le test num ${id} pour le user qui a le nom ${name}`
//   );
// });

//On utilise la liste de pokémons dans notre point de terminison

// Reponse HTTP avec des caracteres speciaux
// app.get("/api/pokemons/:id", (req, res) => {
//   const id = parseInt(req.params.id);
//   const pokemon = pokemons.find((pokemon) => pokemon.id === id);
//   res.send(`Vous avez demandé le pokémon ${pokemon.name}.`);
// });

// Le point de terminison affichant un pokemon en utilisant son id (Reponse HTTP au Format JSON)
app.get("/api/pokemons/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const pokemon = pokemons.find((pokemon) => pokemon.id === id);
  const message = "Un pokémon à bien été trouvé";
  res.json(success(message, pokemon));
});

// Le point de terminison affichant le nombre de pokémons :
// app.get("/api/pokemons", (req, res) => {
//   res.send(
//     `il y a ${pokemons.length} pokkemons dans le pokedex pour le moment.`
//   );
// });

// Le point de terminison affichant la liste des pokemons (Reponse HTTP au Format JSON)
app.get("/api/pokemons", (req, res) => {
  const message = "La liste des pokémons a bien été récupéré";
  res.json(success(message, pokemons));
});

app.post("/api/pokemons", (req, res) => {
  const id = getUniqueId(pokemons);
  const pokemonCreated = { ...req.body, ...{ id: id, created: new Date() } };
  pokemons.push(pokemonCreated);
  const message = `Le pokemon ${pokemonCreated.name} a bien été créé`;
  res.json(success(message, pokemonCreated));
});

app.put("/api/pokemons/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const pokemonUpdated = { ...req.body, id: id };
  pokemons = pokemons.map((pokemon) => {
    return pokemon.id === id ? pokemonUpdated : pokemon;
  });
  const message = `Le pokemon ${pokemonUpdated.name} a bien été modifié`;
  res.json(success(message, pokemonUpdated));
});

app.delete("/api/pokemons/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const pokemonDeleted = pokemons.find((pokemon) => pokemon.id === id);
  pokemons = pokemons.filter((pokemon) => pokemon.id !== id);
  const message = `Le pokemon ${pokemonDeleted.name} a bien été supprimé`;
  res.json(success(message, pokemonDeleted));
});

app.listen(port, () =>
  console.log(
    `Notre application Node est démarrée sur : http://localhost:${port}`
  )
);



